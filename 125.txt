<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Spending Tracker ‚Äî Pro Suite (Updated)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- Charts -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- PDF (current-month export) -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <!-- Excel import (SheetJS) -->
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  <style>
    :root{
      --bg:#f7f9fc; --fg:#111; --card:#fff; --muted:#666;
      --row-hover:#fafbff; --border:#eef2f8;
      --primary:#0b5ed7; --success:#28a745; --danger:#dc3545; --violet:#6f42c1; --warn:#fd7e14;
    }
    body.dark{
      --bg:#151515; --fg:#f1f1f1; --card:#222; --muted:#aaa;
      --row-hover:#2a2a2a; --border:#333;
      --primary:#3a82ff; --success:#3bd46f; --danger:#ff5a6b; --violet:#9d7bf7; --warn:#ffac5c;
    }
    *{box-sizing:border-box}
    body { font-family: Arial, sans-serif; background:var(--bg); color:var(--fg); margin:0; padding:18px; transition:background .25s,color .25s; }
    .container { max-width:1240px; margin:16px auto; background:var(--card); padding:18px; border-radius:12px; box-shadow:0 6px 20px rgba(13,38,76,0.08); border:1px solid var(--border);}
    h1 { text-align:center; margin:6px 0 18px; }
    nav { display:flex; gap:10px; margin-bottom:18px; flex-wrap:wrap; align-items:center; }
    nav .group { display:flex; gap:10px; flex-wrap:wrap; }
    nav button { padding:10px 12px; border:0; border-radius:10px; background:var(--primary); color:#fff; cursor:pointer; font-weight:600; }
    nav button:hover { filter:brightness(.96); }
    .btn { padding:8px 10px; border-radius:8px; border:0; cursor:pointer; }
    .btn-edit { background:#ffc107; }
    .btn-delete { background:var(--danger); color:#fff; }
    .btn-archive { background:var(--violet); color:#fff; }
    .btn-reset { background:#6c757d; color:#fff; }
    .btn-export { background:#0d6efd; color:#fff; }
    .btn-logout { background:#b02a37; color:#fff; }
    .btn-theme { background:#198754; color:#fff; }
    .btn-file { background:#20c997; color:#fff; }
    .btn-secondary{ background:#e9ecef; color:var(--fg); }
    input, select, textarea { padding:8px; border-radius:8px; border:1px solid var(--border); background:transparent; color:var(--fg); width:100%; }
    textarea{min-height:70px; resize:vertical;}
    input::placeholder, textarea::placeholder{color:var(--muted)}
    section { display:none; }
    section.active { display:block; }
    label { font-size:13px; color:var(--fg); display:block; margin-bottom:6px; }
    .row-3 { display:grid; grid-template-columns: 1.2fr 1fr 1fr; gap:12px; align-items:end; }
    .row-2 { display:grid; grid-template-columns: 1fr 1fr; gap:12px; align-items:end; }
    .summary { display:grid; grid-template-columns: repeat(4,1fr); gap:12px; margin-top:14px; }
    .card { background:rgba(0,0,0,.03); padding:12px; border-radius:10px; text-align:center; border:1px solid var(--border);}
    table { width:100%; border-collapse:collapse; margin-top:12px; font-size:14px; }
    th, td { padding:10px; border-bottom:1px solid var(--border); text-align:center; vertical-align:middle; }
    tr:hover { background:var(--row-hover); }
    .small { font-size:12px; color:var(--muted); }
    .actions { display:flex; gap:8px; justify-content:center; flex-wrap:wrap; }
    .muted { color:var(--muted); font-size:13px; }
    canvas { max-width:100%; margin-top:10px; }
    .pill { display:inline-block; padding:2px 8px; border-radius:999px; font-size:12px; }
    .pill-exp{ background:rgba(220,53,69,.12); color:var(--danger); border:1px solid rgba(220,53,69,.4); }
    .pill-inc{ background:rgba(40,167,69,.12); color:var(--success); border:1px solid rgba(40,167,69,.4); }
    #alerts{ display:none; margin-bottom:14px; }
    .alert{ background:rgba(253,126,20,.12); border:1px solid var(--warn); color:var(--fg); padding:10px; border-radius:10px; margin-bottom:8px; display:flex; justify-content:space-between; gap:10px; }
    .alert strong{ color:var(--warn); }
    .close-x{ background:transparent; border:0; cursor:pointer; font-weight:700; color:var(--muted); }
    #lockScreen { max-width:420px; margin:80px auto; background:var(--card); padding:20px; border-radius:12px; box-shadow:0 6px 20px rgba(13,38,76,0.08); text-align:center; border:1px solid var(--border);}
    #lockScreen input { width:100%; margin-top:10px; }
    #lockScreen button { width:100%; margin-top:10px; }

    .grid { display:grid; gap:12px; }
    .grid-3 { grid-template-columns: repeat(3, 1fr); }
    .grid-2 { grid-template-columns: repeat(2, 1fr); }
    .grid-4 { grid-template-columns: repeat(4, 1fr); }
    .thumb { width:48px; height:48px; object-fit:cover; border-radius:8px; border:1px solid var(--border); }
    progress { width:100%; height:16px; border-radius:10px; overflow:hidden; }

    .modal-backdrop{ position:fixed; inset:0; background:rgba(0,0,0,0.4); display:none; align-items:center; justify-content:center; z-index:9999;}
    .modal{ background:var(--card); padding:16px; border-radius:12px; width:100%; max-width:720px; border:1px solid var(--border); box-shadow:0 6px 30px rgba(0,0,0,0.12); }
    .modal h3{ margin-top:0; }

    @media (max-width:900px){
      .row-3 { grid-template-columns: 1fr; }
      .summary { grid-template-columns: 1fr 1fr; }
      nav { flex-direction:column; align-items:stretch; }
      nav .right { width:100%; display:flex; gap:10px; }
      nav .right button { flex:1; }
      .grid-4 { grid-template-columns: 1fr 1fr; }
    }
  </style>
</head>
<body>
  <!-- üîí Lock Screen -->
  <div id="lockScreen">
    <h2>üîí Login <small style="font-weight:400; color:var(--muted);">(DEMO users ‚Äî do not use in production)</small></h2>
    <input type="text" id="username" placeholder="Username (e.g., alice)">
    <input type="password" id="unlockPassword" placeholder="Password" autocomplete="off">
    <button type="button" id="btnUnlock">Unlock</button>
    <p id="errorMsg" style="color:#b02a37; display:none; margin-top:8px;">Wrong username or password</p>
    <div class="small muted" style="margin-top:10px;">
      Demo credentials: admin/1234, alice/1111, bob/2222 ‚Äî replace with real auth before publishing.
    </div>
  </div>

  <!-- üí∞ App -->
  <div id="app" style="display:none;">
    <div class="container">
      <h1>üí∞ Spending Tracker ‚Äî Pro Suite</h1>

      <div id="alerts"></div>

      <nav>
        <div class="group">
          <button id="navDashboard">Dashboard</button>
          <button id="navAdd">Add</button>
          <button id="navHistory">History</button>
          <button id="navRecurring">Recurring</button>
          <button id="navCategories">Category Budgets</button>
          <button id="navReports">Reports</button>
          <button id="navInsights">Insights</button>
          <button id="navGoals">Goals</button>
        </div>
        <div class="right" style="margin-left:auto; display:flex; gap:10px; align-items:center;">
          <button class="btn btn-file" id="btnImportCSV">üìÇ Import CSV</button>
          <input type="file" id="importCSV" style="display:none" accept=".csv">
          <button class="btn btn-file" id="btnImportXLSX">üìÑ Import Excel</button>
          <input type="file" id="importXLSX" style="display:none" accept=".xlsx,.xls">
          <button class="btn btn-file" id="btnImportJSON">üì§ Import JSON</button>
          <input type="file" id="importJSON" style="display:none" accept=".json">
          <button class="btn btn-file" id="btnExportJSON">üì• Export JSON</button>
          <button class="btn btn-theme" id="btnTheme">üåô/‚òÄÔ∏è Theme</button>
          <button class="btn btn-logout" id="btnLogout">Logout</button>
        </div>
      </nav>

      <!-- Dashboard -->
      <section id="dashboard" class="active">
        <h2>Current Month</h2>
        <div class="row-3">
          <div>
            <label>Monthly Budget (IQD)</label>
            <input id="monthlyBudget" type="number" placeholder="Enter budget (IQD)" />
            <div style="margin-top:8px;">
              <button class="btn btn-archive" id="btnArchiveMonth">üì¶ Close Month & Save History</button>
            </div>
            <div style="margin-top:8px;">
              <button class="btn btn-reset" id="btnResetMonth">üîÑ Reset Current Month</button>
            </div>
            <div style="margin-top:8px;">
              <button class="btn btn-export" id="btnExportPDF">üìÑ Export Current Month PDF</button>
            </div>
            <div class="small muted" style="margin-top:8px;">Logged in as <span id="who"></span>.</div>
            <div id="indexedDBStatus" class="small muted" style="margin-top:6px;"></div>
          </div>

          <div>
            <label>Quick Edit Budget</label>
            <input id="quickBudget" type="number" placeholder="Type amount to update budget" />
            <div class="small muted" style="margin-top:8px;">Quick updates save instantly.</div>
          </div>

          <div>
            <label>Search Current</label>
            <input id="searchCurrent" type="text" placeholder="Search by title..." />
            <div class="small muted" style="margin-top:8px;">Filters the table below.</div>
          </div>
        </div>

        <div class="summary">
          <div class="card"><div class="small muted">Total Spent</div><div style="font-weight:700;font-size:20px;"><span id="totalSpent">0</span> IQD</div></div>
          <div class="card"><div class="small muted">Total Income</div><div style="font-weight:700;font-size:20px;"><span id="totalIncome">0</span> IQD</div></div>
          <div class="card"><div class="small muted">Net (Income ‚àí Expense)</div><div style="font-weight:700;font-size:20px;"><span id="netAmount">0</span> IQD</div></div>
          <div class="card"><div class="small muted">Remaining to Budget</div><div style="font-weight:700;font-size:20px;"><span id="remaining">0</span> IQD</div></div>
        </div>

        <canvas id="pieChart"></canvas>
        <canvas id="barChart"></canvas>

        <h3 style="margin-top:18px;">Current Items</h3>
        <table>
          <thead>
            <tr>
              <th>Type</th><th>Date</th><th>Title</th><th>Category</th><th>Amount (IQD)</th><th>Note</th><th>Receipt</th><th>Actions</th>
            </tr>
          </thead>
          <tbody id="currentTable"></tbody>
        </table>
      </section>

      <!-- Add -->
      <section id="add">
        <h2>Add Item</h2>
        <div class="row-3" style="margin-bottom:12px;">
          <div>
            <label>Type</label>
            <select id="type">
              <option value="expense">Expense</option>
              <option value="income">Income</option>
            </select>
          </div>
          <div><label>Date</label><input id="date" type="date" /></div>
          <div><label>Amount (IQD)</label><input id="amount" type="number" /></div>
        </div>

        <div class="row-3" style="margin-bottom:12px;">
          <div><label>Title</label><input id="title" type="text" placeholder="e.g., Groceries, Salary"/></div>
          <div>
            <label>Category</label>
            <select id="category"></select>
          </div>
          <div>
            <label>Recurring Monthly?</label>
            <select id="recurringFlag">
              <option value="no">No</option>
              <option value="yes">Yes</option>
            </select>
          </div>
        </div>

        <div class="row-2" style="margin-bottom:12px;">
          <div>
            <label>Note (optional)</label>
            <textarea id="note" placeholder="Add details..."></textarea>
          </div>
          <div>
            <label>Receipt Image (optional)</label>
            <input id="receipt" type="file" accept="image/*" />
            <div class="small muted" style="margin-top:6px;">Stored in IndexedDB (better than localStorage). Large images are resized to 800√ó800.</div>
          </div>
        </div>

        <div style="display:flex; gap:10px;">
          <button class="btn btn-archive" id="btnAddItem">‚ûï Add</button>
          <button class="btn" id="btnClearAdd">Clear</button>
        </div>
      </section>

      <!-- History -->
      <section id="history">
        <h2>Monthly History (Archived)</h2>

        <div style="display:flex; gap:10px; margin-bottom:10px; align-items:end;">
          <div><label>Start</label><input type="month" id="startMonth"></div>
          <div><label>End</label><input type="month" id="endMonth"></div>
          <div><button class="btn" id="btnFilterHistory">Filter Range</button></div>
        </div>
        <div id="rangeSummary" class="card" style="display:none;"></div>

        <div id="historyList" style="margin-top:10px;"></div>
      </section>

      <!-- Recurring Manager -->
      <section id="recurring">
        <h2>Recurring Items (Monthly)</h2>
        <div class="small muted" style="margin-bottom:8px;">Items marked ‚ÄúRecurring‚Äù are auto-added on the 1st of each new month (or next time you open the app).</div>
        <table>
          <thead>
            <tr><th>Type</th><th>Title</th><th>Category</th><th>Amount</th><th>Actions</th></tr>
          </thead>
          <tbody id="recurringTable"></tbody>
        </table>
      </section>

      <!-- Category Budgets -->
      <section id="categories">
        <h2>Category Budgets</h2>
        <div class="small muted" style="margin-bottom:8px;">Set per-category monthly budgets. Alerts trigger at 80% and 100%.</div>
        <div id="catBudgetGrid" class="grid grid-3" style="margin-bottom:12px;"></div>
        <button class="btn btn-export" id="btnSaveCatBudgets">üíæ Save Category Budgets</button>
      </section>

      <!-- Reports -->
      <section id="reports">
        <h2>Reports (CSV Only)</h2>
        <div class="grid grid-4" style="margin-bottom:10px; text-align:left;">
          <div>
            <label>From (date)</label>
            <input type="date" id="repFrom">
          </div>
          <div>
            <label>To (date)</label>
            <input type="date" id="repTo">
          </div>
          <div>
            <label>Category</label>
            <select id="repCategory"><option value="">All</option></select>
          </div>
          <div style="display:flex; gap:8px; align-items:end;">
            <button class="btn" id="btnRunReport">Run</button>
            <button class="btn btn-export" id="btnExportReportCSV">Export CSV</button>
          </div>
        </div>
        <div id="reportSummary" class="card" style="display:none; text-align:left;"></div>
        <table>
          <thead><tr>
            <th>Type</th><th>Date</th><th>Title</th><th>Category</th><th>Amount</th>
          </tr></thead>
          <tbody id="reportTable"></tbody>
        </table>
      </section>

      <!-- Insights -->
      <section id="insights">
        <h2>Insights & Forecast</h2>
        <div class="grid grid-2">
          <div class="card" style="text-align:left;">
            <h3>AI-like Insights</h3>
            <ul id="insightsList"></ul>
          </div>
          <div class="card" style="text-align:left;">
            <h3>Forecast</h3>
            <div id="forecastText" class="small"></div>
            <canvas id="forecastChart"></canvas>
          </div>
        </div>
      </section>

      <!-- Goals -->
      <section id="goals">
        <h2>Goals</h2>
        <div class="grid grid-3" style="margin-bottom:10px; text-align:left;">
          <div>
            <label>Goal Title</label>
            <input id="goalTitle" placeholder="e.g., Save for Laptop">
          </div>
          <div>
            <label>Target Amount (IQD)</label>
            <input id="goalTarget" type="number" placeholder="e.g., 2000000">
          </div>
          <div>
            <label>Scope</label>
            <select id="goalScope">
              <option value="monthly">Monthly</option>
              <option value="global">Global</option>
            </select>
          </div>
        </div>
        <button class="btn btn-archive" id="btnAddGoal">‚ûï Add Goal</button>

        <h3 style="margin-top:16px;">Your Goals</h3>
        <div id="goalsList"></div>
      </section>
    </div>
  </div>

  <!-- Edit Modal -->
  <div id="modalBackdrop" class="modal-backdrop">
    <div class="modal" role="dialog" aria-modal="true" aria-labelledby="editModalTitle">
      <h3 id="editModalTitle">Edit Item</h3>
      <div style="display:grid; gap:8px;">
        <div style="display:grid; grid-template-columns:1fr 1fr; gap:8px;">
          <div>
            <label>Type</label>
            <select id="edit_type"><option value="expense">Expense</option><option value="income">Income</option></select>
          </div>
          <div>
            <label>Date</label>
            <input id="edit_date" type="date" />
          </div>
        </div>
        <div style="display:grid; grid-template-columns:1fr 1fr; gap:8px;">
          <div>
            <label>Title</label>
            <input id="edit_title" />
          </div>
          <div>
            <label>Category</label>
            <select id="edit_category"></select>
          </div>
        </div>
        <div style="display:grid; grid-template-columns:1fr 1fr; gap:8px;">
          <div>
            <label>Amount</label>
            <input id="edit_amount" type="number" />
          </div>
          <div>
            <label>Recurring</label>
            <select id="edit_recurring"><option value="no">No</option><option value="yes">Yes</option></select>
          </div>
        </div>
        <div>
          <label>Note</label>
          <textarea id="edit_note"></textarea>
        </div>
        <div>
          <label>Replace Receipt</label>
          <input id="edit_receipt" type="file" accept="image/*" />
          <div class="small muted" style="margin-top:6px;">Existing receipt (if any) will be replaced.</div>
        </div>
        <div style="display:flex; gap:8px; justify-content:flex-end;">
          <button class="btn btn-secondary" id="btnEditCancel">Cancel</button>
          <button class="btn btn-archive" id="btnEditSave">Save</button>
        </div>
      </div>
    </div>
  </div>

<script>
/* ================== Config ================== */
const users = { "admin": "1234", "alice": "1111", "bob": "2222" };
const DEFAULT_CATEGORIES = ["Food","Rent","Transport","Utilities","Shopping","Health","Entertainment","Education","Other"];
const DB_NAME = "spend_tracker_db_v1";
const DB_STORE_RECEIPTS = "receipts";
const ITEM_TYPE = { INCOME: "income", EXPENSE: "expense" };

/* ================== State ================== */
let currentUser = null;
let items = [];                // current month items
let monthlyBudget = 0;
let monthlyHistory = [];       // archives
let recurringItems = [];
let categoryBudgets = {};
let lastAppliedMonth = "";
let goals = [];                // {title,target,scope('monthly'|'global'),achievedAt?}
let goalsMonth = "";           // month when monthly goals were last set/rolled
let reportRows = [];
let pieChart, barChart, forecastChart;

// IndexedDB reference
let idb = null;
let idbAvailable = false;

/* ================== Helpers ================== */
const $ = id => document.getElementById(id);
const css = prop => getComputedStyle(document.body).getPropertyValue(prop).trim();
function escapeHtml(str){ return String(str||"").replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }
function fmt(v){ return Number(v||0).toLocaleString('en-US'); }
function key(k){ return `${currentUser}::${k}`; }
function monthKey(d=new Date()){ return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}`; }
function monthLabel(keyStr){ const [y,m]=keyStr.split("-").map(Number); const names=["January","February","March","April","May","June","July","August","September","October","November","December"]; return `${names[m-1]} ${y}`; }
function parseDateStr(s){ const d=new Date(s); return isNaN(d)?null:d; }
function sanitizeId(name){ return String(name||"").replace(/[^a-z0-9_-]/gi,'_'); }

/* ================== IndexedDB (receipts) ================== */
function openDB(){
  return new Promise((resolve) => {
    if(!window.indexedDB) { idbAvailable = false; $("indexedDBStatus").textContent = "IndexedDB not supported ‚Äî receipts will fall back to localStorage."; resolve(null); return; }
    const req = indexedDB.open(DB_NAME, 1);
    req.onupgradeneeded = e => {
      const db = e.target.result;
      if(!db.objectStoreNames.contains(DB_STORE_RECEIPTS)) db.createObjectStore(DB_STORE_RECEIPTS, { keyPath: "id", autoIncrement: true });
    };
    req.onsuccess = e => {
      idb = e.target.result;
      idbAvailable = true;
      $("indexedDBStatus").textContent = "IndexedDB active for receipts (safer storage).";
      resolve(idb);
    };
    req.onerror = () => {
      idbAvailable = false;
      $("indexedDBStatus").textContent = "IndexedDB failed ‚Äî receipts will fall back to localStorage.";
      resolve(null);
    };
  });
}
function saveReceiptBlob(blob){
  return new Promise((resolve) => {
    if(!idbAvailable){ resolve(null); return; }
    const tx = idb.transaction([DB_STORE_RECEIPTS], "readwrite");
    const store = tx.objectStore(DB_STORE_RECEIPTS);
    const rec = { blob, createdAt: new Date().toISOString() };
    const req = store.add(rec);
    req.onsuccess = () => resolve(req.result);
    req.onerror = () => resolve(null);
  });
}
function getReceiptBlob(id){
  return new Promise((resolve) => {
    if(!idbAvailable || id==null){ resolve(null); return; }
    const tx = idb.transaction([DB_STORE_RECEIPTS], "readonly");
    const store = tx.objectStore(DB_STORE_RECEIPTS);
    const r = store.get(Number(id));
    r.onsuccess = ()=> resolve(r.result ? r.result.blob : null);
    r.onerror = ()=> resolve(null);
  });
}
function deleteReceipt(id){
  return new Promise((resolve) => {
    if(!idbAvailable || id==null){ resolve(false); return; }
    const tx = idb.transaction([DB_STORE_RECEIPTS], "readwrite");
    const store = tx.objectStore(DB_STORE_RECEIPTS);
    const r = store.delete(Number(id));
    r.onsuccess = ()=> resolve(true);
    r.onerror = ()=> resolve(false);
  });
}

/* ================== Theme ================== */
function applyTheme(){ localStorage.getItem(key("theme"))==="dark" ? document.body.classList.add("dark") : document.body.classList.remove("dark"); }
function toggleTheme(){ localStorage.setItem(key("theme"), document.body.classList.contains("dark") ? "light":"dark"); applyTheme(); updateDashboard(); }
applyTheme();

/* ================== Storage ================== */
function loadUserData(){
  items = JSON.parse(localStorage.getItem(key("items"))) || [];
  monthlyBudget = parseFloat(localStorage.getItem(key("budget"))) || 0;
  monthlyHistory = JSON.parse(localStorage.getItem(key("history"))) || [];
  recurringItems = JSON.parse(localStorage.getItem(key("recurring"))) || [];
  categoryBudgets = JSON.parse(localStorage.getItem(key("catBudgets"))) || {};
  lastAppliedMonth = localStorage.getItem(key("lastAppliedMonth")) || "";
  goals = JSON.parse(localStorage.getItem(key("goals"))) || [];
  goalsMonth = localStorage.getItem(key("goalsMonth")) || "";
}
function saveAll(){
  localStorage.setItem(key("items"), JSON.stringify(items));
  localStorage.setItem(key("budget"), monthlyBudget);
  localStorage.setItem(key("history"), JSON.stringify(monthlyHistory));
  localStorage.setItem(key("recurring"), JSON.stringify(recurringItems));
  localStorage.setItem(key("catBudgets"), JSON.stringify(categoryBudgets));
  localStorage.setItem(key("lastAppliedMonth"), lastAppliedMonth);
  localStorage.setItem(key("goals"), JSON.stringify(goals));
  localStorage.setItem(key("goalsMonth"), goalsMonth);
}

/* ================== Sections / Nav ================== */
function showSection(id){
  document.querySelectorAll("section").forEach(s=>s.classList.remove("active"));
  $(id).classList.add("active");
  if(id==="dashboard"){ updateDashboard(); renderCurrentTable(); }
  if(id==="history"){ renderMonthlyHistory(); }
  if(id==="recurring"){ renderRecurringTable(); }
  if(id==="categories"){ buildCategoryBudgetGrid(); }
  if(id==="reports"){ prepareReportFilters(); }
  if(id==="insights"){ renderInsights(); renderForecast(); }
  if(id==="goals"){ rolloverMonthlyGoals(); renderGoals(); } // ‚úÖ ensure monthly rollover when opening
}

/* ================== Alerts ================== */
function showAlert(msg, level="warn"){
  const holder = $("alerts");
  const box = document.createElement("div");
  box.className="alert";
  box.innerHTML = `<div><strong>${level==="danger"?"‚õî":level==="warn"?"‚ö†Ô∏è":"‚ÑπÔ∏è"}</strong> ${escapeHtml(msg)}</div>
                   <button class="close-x" title="dismiss">‚úï</button>`;
  box.querySelector(".close-x").onclick = ()=> {
    box.remove();
    if(!$("alerts").children.length) $("alerts").style.display="none";
  };
  holder.appendChild(box);
  holder.style.display="block";
}
function clearAlerts(){ $("alerts").innerHTML=""; $("alerts").style.display="none"; }

/* ================== WebAudio Ding ================== */
function playDing(){
  try{
    const ctx = new (window.AudioContext||window.webkitAudioContext)();
    const o = ctx.createOscillator();
    const g = ctx.createGain();
    o.type = "sine"; o.frequency.value = 880; g.gain.value = 0.0001;
    o.connect(g); g.connect(ctx.destination);
    const now = ctx.currentTime;
    g.gain.exponentialRampToValueAtTime(0.2, now + 0.01);
    g.gain.exponentialRampToValueAtTime(0.0001, now + 0.25);
    o.start(now); o.stop(now + 0.30);
  }catch(e){}
}

/* ================== Category Select/Grid ================== */
function buildCategorySelect(){
  const sel = $("category");
  sel.innerHTML = "";
  const cats = [...new Set([...DEFAULT_CATEGORIES, ...Object.keys(categoryBudgets)])];
  cats.forEach(c => {
    const opt = document.createElement("option");
    opt.value=c; opt.textContent=c;
    sel.appendChild(opt);
  });

  // reports category
  const repSel = $("repCategory");
  repSel.innerHTML = `<option value="">All</option>`;
  cats.forEach(c=>{
    const o=document.createElement("option");
    o.value=c; o.textContent=c; repSel.appendChild(o);
  });
}
function buildCategoryBudgetGrid(){
  const wrapper = $("catBudgetGrid");
  wrapper.innerHTML = "";
  const cats = [...new Set([...DEFAULT_CATEGORIES, ...Object.keys(categoryBudgets)])];
  cats.forEach(c=>{
    const safe = sanitizeId(c);
    const div=document.createElement("div");
    div.className="card";
    div.innerHTML = `<div style="text-align:left;">
      <div style="font-weight:700; margin-bottom:6px;">${escapeHtml(c)}</div>
      <input type="number" id="cb_${safe}" placeholder="Budget (IQD)" value="${categoryBudgets[c]||""}" />
    </div>`;
    wrapper.appendChild(div);
  });
}
function findOriginalCategoryBySanitized(safe){
  const cats = [...new Set([...DEFAULT_CATEGORIES, ...Object.keys(categoryBudgets)])];
  for(const c of cats){ if(sanitizeId(c) === safe) return c; }
  return safe.replace(/_/g,' ');
}
function saveCategoryBudgets(){
  const inputs = Array.from(document.querySelectorAll("#catBudgetGrid input[id^='cb_']"));
  inputs.forEach(inp=>{
    const original = findOriginalCategoryBySanitized(inp.id.replace("cb_",""));
    const val = parseFloat(inp.value);
    if(!isNaN(val) && val>0) categoryBudgets[original]=val; else delete categoryBudgets[original];
  });
  saveAll();
  updateDashboard();
  showAlert(`üíæ Category budgets saved.`, "info");
}

/* ================== Recurring ================== */
function renderRecurringTable(){
  const tb = $("recurringTable"); tb.innerHTML="";
  recurringItems.forEach((r,i)=>{ 
    const tr=document.createElement("tr");
    tr.innerHTML = `<td><span class="pill ${r.type===ITEM_TYPE.EXPENSE?'pill-exp':'pill-inc'}">${r.type}</span></td>
                    <td>${escapeHtml(r.title)}</td>
                    <td>${escapeHtml(r.category||"-")}</td>
                    <td>${fmt(r.amount)}</td>
                    <td class="actions">
                      <button class="btn btn-delete" data-action="removeRecurring" data-index="${i}">üóë Remove</button>
                    </td>`;
    tb.appendChild(tr);
  });
}
function deleteRecurring(i){
  if(!confirm("Remove this recurring item?")) return;
  recurringItems.splice(i,1); saveAll(); renderRecurringTable();
}
function applyRecurringIfNeeded(){
  const mk = monthKey();
  if(lastAppliedMonth === mk) return;
  const today = new Date();
  const d = `${today.getFullYear()}-${String(today.getMonth()+1).padStart(2,'0')}-01`;
  recurringItems.forEach(r=>{
    items.push({ ...r, date: d, note:"(Recurring)", receiptId:null, receiptData:null });
  });
  lastAppliedMonth = mk;
  saveAll();
}

/* ================== Budget Inputs ================== */
function wireBudgetInputs(){
  $("who").textContent = currentUser;
  $("monthlyBudget").value = monthlyBudget || "";
  $("quickBudget").value = monthlyBudget || "";
}
function syncBudgetInputs(){
  monthlyBudget = parseFloat($("monthlyBudget").value) || 0;
  $("quickBudget").value = monthlyBudget || "";
  saveAll(); updateDashboard();
}
function quickSaveBudget(){
  monthlyBudget = parseFloat($("quickBudget").value) || 0;
  $("monthlyBudget").value = monthlyBudget || "";
  saveAll(); updateDashboard();
}

/* ================== Add Item ================== */
function clearAddForm(){
  $("type").value="expense"; $("date").value=""; $("amount").value="";
  $("title").value=""; $("category").selectedIndex=0; $("note").value=""; $("receipt").value="";
  $("recurringFlag").value="no";
}
function dataURLToBlob(dataurl) {
  const arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1];
  const bstr = atob(arr[1]); let n = bstr.length; const u8arr = new Uint8Array(n);
  while(n--){ u8arr[n] = bstr.charCodeAt(n); }
  return new Blob([u8arr], {type:mime});
}
function fileToDataUrlResized(file, maxW, maxH){
  return new Promise((resolve, reject)=>{
    const reader = new FileReader();
    reader.onload = e=>{
      const img = new Image();
      img.onload = ()=>{
        const scale = Math.min(maxW/img.width, maxH/img.height, 1);
        const canvas = document.createElement("canvas");
        canvas.width = Math.round(img.width*scale);
        canvas.height = Math.round(img.height*scale);
        const ctx = canvas.getContext("2d");
        ctx.drawImage(img,0,0,canvas.width,canvas.height);
        resolve(canvas.toDataURL("image/jpeg", 0.75));
      };
      img.onerror = ()=> reject(new Error("Image load error"));
      img.src = e.target.result;
    };
    reader.onerror = ()=> reject(new Error("File read error"));
    reader.readAsDataURL(file);
  });
}
async function addItem(){
  const type = $("type").value;
  const date = $("date").value;
  const amount = parseFloat($("amount").value);
  const title = $("title").value.trim();
  const category = $("category").value;
  const note = $("note").value.trim();
  const recurring = $("recurringFlag").value==="yes";
  const file = $("receipt").files[0];

  if(!type || !date || !title || isNaN(amount) || amount<=0){ alert("Fill type, date, title and positive amount"); return; }

  let receiptId = null, dataUrlForInline = null;
  if(file){
    try{
      const dataUrl = await fileToDataUrlResized(file, 800, 800);
      const blob = dataURLToBlob(dataUrl);
      const id = await saveReceiptBlob(blob);
      if(id){ receiptId = id; }
      else {
        dataUrlForInline = dataUrl; // fallback
        showAlert("‚ö†Ô∏è IndexedDB unavailable ‚Äî receipt stored inline (may affect storage on iOS).", "warn");
      }
    }catch(e){ console.error("Receipt save error", e); }
  }

  const entry = { type, date, amount, title, category, note, receiptId, receiptData: dataUrlForInline };
  items.push(entry);

  if(recurring){
    const exists = recurringItems.some(r => r.title===title && r.amount===amount && r.type===type && r.category===category);
    if(!exists) recurringItems.push({ type, title, amount, category });
  }

  saveAll();
  clearAddForm();
  updateDashboard();
  renderCurrentTable();
  renderRecurringTable();
  showAlert("‚úÖ Item added" + (recurring ? " and saved as recurring." : "."), "info");
  checkGoalsProgressAndCelebrate();
}

/* ================== Table / CRUD / Edit Modal ================== */
function renderCurrentTable(){
  const tbody = $("currentTable");
  const search = ($("searchCurrent")?.value || "").toLowerCase();
  tbody.innerHTML = "";
  items
    .map((e,i)=>({e,i}))
    .filter(obj => (obj.e.title||"").toLowerCase().includes(search))
    .forEach(({e,i}) => {
      const tr = document.createElement("tr");
      const receiptHtml = e.receiptId ? `<a href="#" data-action="openReceipt" data-rid="${e.receiptId}" title="Open receipt"><img class="thumb" src="" data-thumb-index="${i}" data-rid="${e.receiptId}"/></a>` :
                          (e.receiptData ? `<a href="${e.receiptData}" target="_blank" title="Open receipt"><img class="thumb" src="${e.receiptData}"/></a>` : "");
      tr.innerHTML = `
        <td><span class="pill ${e.type===ITEM_TYPE.EXPENSE?'pill-exp':'pill-inc'}">${e.type}</span></td>
        <td>${e.date}</td>
        <td>${escapeHtml(e.title)}</td>
        <td>${escapeHtml(e.category||"-")}</td>
        <td>${fmt(e.amount)}</td>
        <td>${e.note? `<span title="${escapeHtml(e.note)}">üìù</span>` : ""}</td>
        <td>${receiptHtml}</td>
        <td class="actions">
          <button class="btn btn-edit" data-action="openEdit" data-index="${i}">‚úèÔ∏è</button>
          <button class="btn btn-delete" data-action="deleteItem" data-index="${i}">üóë</button>
        </td>`;
      tbody.appendChild(tr);
    });

  // asynchronously fill thumbnail src for indexedDB receipts
  setTimeout(async ()=>{
    const thumbs = document.querySelectorAll('img.thumb[data-thumb-index]');
    for(const img of thumbs){
      const rid = img.dataset.rid;
      const blob = await getReceiptBlob(rid);
      if(blob){
        const url = URL.createObjectURL(blob);
        img.src = url;
        img.addEventListener('load', ()=> URL.revokeObjectURL(url)); // ‚úÖ prevent leak
      } else {
        img.src = "";
      }
    }
  }, 50);
}
function openReceipt(id){
  getReceiptBlob(id).then(blob=>{
    if(!blob){ showAlert("Receipt not found (may have been removed).", "warn"); return; }
    const url = URL.createObjectURL(blob);
    const win = window.open(url, "_blank");
    if (win) {
      const revoke = () => URL.revokeObjectURL(url);
      win.addEventListener('beforeunload', revoke);
      setTimeout(revoke, 60000); // safety
    }
  });
}
function deleteItem(i){
  if(!confirm("Delete this item?")) return;
  const item = items[i];
  if(item && item.receiptId){ deleteReceipt(item.receiptId); }
  items.splice(i,1); saveAll(); renderCurrentTable(); updateDashboard(); checkGoalsProgressAndCelebrate();
}

// Modal editing
let editingIndex = null;
function openEditModal(i){
  editingIndex = i;
  const item = items[i];
  if(!item) return;
  $("edit_type").value = item.type;
  $("edit_date").value = item.date;
  $("edit_title").value = item.title;
  buildEditCategorySelect(item.category);
  $("edit_amount").value = item.amount;
  $("edit_note").value = item.note || "";
  const isRecurring = recurringItems.some(r=>r.title===item.title && r.amount===item.amount && r.type===item.type && r.category===item.category);
  $("edit_recurring").value = isRecurring ? "yes" : "no";
  $("edit_receipt").value = "";
  $("modalBackdrop").style.display = "flex";
}
function closeEditModal(){ editingIndex = null; $("modalBackdrop").style.display = "none"; }
function buildEditCategorySelect(selected){
  const sel = $("edit_category");
  sel.innerHTML = "";
  const cats = [...new Set([...DEFAULT_CATEGORIES, ...Object.keys(categoryBudgets)])];
  cats.forEach(c => {
    const opt = document.createElement("option");
    opt.value=c; opt.textContent=c;
    if(c===selected) opt.selected=true;
    sel.appendChild(opt);
  });
}
async function saveEdit(){
  if(editingIndex==null) return;
  const item = items[editingIndex];
  if(!item) return;
  const type = $("edit_type").value;
  const date = $("edit_date").value;
  const title = $("edit_title").value.trim();
  const category = $("edit_category").value;
  const amount = parseFloat($("edit_amount").value);
  const note = $("edit_note").value.trim();
  const recurring = $("edit_recurring").value==="yes";
  const file = $("edit_receipt").files[0];

  if(!type || !date || !title || isNaN(amount) || amount<=0){ alert("Fill type, date, title and positive amount"); return; }

  if(file){
    if(item.receiptId) await deleteReceipt(item.receiptId);
    const dataUrl = await fileToDataUrlResized(file, 800, 800);
    const blob = dataURLToBlob(dataUrl);
    const id = await saveReceiptBlob(blob);
    if(id){ item.receiptId = id; item.receiptData = null; }
    else { item.receiptId = null; item.receiptData = dataUrl; showAlert("‚ö†Ô∏è IndexedDB unavailable ‚Äî receipt stored inline (may affect storage on iOS).", "warn"); }
  }

  item.type = type; item.date = date; item.title = title; item.category = category; item.amount = amount; item.note = note;

  if(recurring){
    const exists = recurringItems.some(r => r.title===title && r.amount===amount && r.type===type && r.category===category);
    if(!exists) recurringItems.push({ type, title, amount, category });
  } else {
    recurringItems = recurringItems.filter(r => !(r.title===title && r.amount===amount && r.type===type && r.category===category));
  }

  saveAll();
  closeEditModal();
  renderCurrentTable();
  updateDashboard();
  renderRecurringTable();
  showAlert("‚úÖ Item updated", "info");
  checkGoalsProgressAndCelebrate();
}

/* ================== Dashboard + Charts + Alerts ================== */
function totalsByCategory(){
  const map = {};
  items.forEach(e=>{
    if(e.type!==ITEM_TYPE.EXPENSE) return;
    const c = e.category || "Other";
    map[c]=(map[c]||0)+(e.amount||0);
  });
  return map;
}
function updateDashboard(){
  wireBudgetInputs();
  clearAlerts();

  const totalSpent = items.filter(e=>e.type===ITEM_TYPE.EXPENSE).reduce((s, e) => s + (e.amount || 0), 0);
  const totalIncome = items.filter(e=>e.type===ITEM_TYPE.INCOME).reduce((s, e) => s + (e.amount || 0), 0);
  const remaining = (monthlyBudget || 0) - totalSpent;
  const net = totalIncome - totalSpent;

  $("totalSpent").textContent = fmt(totalSpent);
  $("totalIncome").textContent = fmt(totalIncome);
  $("netAmount").textContent = fmt(net);
  $("remaining").textContent = fmt(remaining);

  if(monthlyBudget>0){
    const ratio = totalSpent / monthlyBudget;
    if(ratio >= 1) showAlert("Budget exceeded this month!", "danger");
    else if(ratio >= 0.8) showAlert("You‚Äôve reached 80% of your monthly budget.", "warn");
  }
  const catSpend = totalsByCategory();
  Object.keys(categoryBudgets).forEach(cat=>{
    const b = categoryBudgets[cat];
    if(b>0){
      const s = catSpend[cat]||0;
      const r = s/b;
      if(r>=1) showAlert(`Category "${cat}" exceeded its budget.`, "danger");
      else if(r>=0.8) showAlert(`Category "${cat}" reached 80% of its budget.`, "warn");
    }
  });

  const labelColor = css('--fg');
  const gridColor = document.body.classList.contains('dark') ? 'rgba(255,255,255,.15)' : 'rgba(0,0,0,.08)';

  const savedVal = Math.max((monthlyBudget||0)-totalSpent, 0);
  const pctx = $("pieChart").getContext("2d");
  if(pieChart) pieChart.destroy();
  pieChart = new Chart(pctx, {
    type: "pie",
    data: { labels: ["Spent","Remaining"], datasets: [{ data: [totalSpent, savedVal], backgroundColor: [css('--danger'), css('--success')] }] },
    options: { plugins: { legend: { labels: { color: labelColor } } } }
  });

  const now = new Date();
  const dim = new Date(now.getFullYear(), now.getMonth()+1, 0).getDate();
  const currMonth = `${now.getFullYear()}-${String(now.getMonth()+1).padStart(2,'0')}`;
  const incomeDay = Array(dim).fill(0);
  const expenseDay = Array(dim).fill(0);
  items.forEach(e => {
    const d = new Date(e.date);
    if(!isNaN(d)) {
      const k = `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}`;
      if(k === currMonth){
        if(e.type===ITEM_TYPE.EXPENSE) expenseDay[d.getDate()-1] += (e.amount || 0);
        else incomeDay[d.getDate()-1] += (e.amount || 0);
      }
    }
  });
  const bctx = $("barChart").getContext("2d");
  if(barChart) barChart.destroy();
  barChart = new Chart(bctx, {
    type: "bar",
    data: { labels: Array.from({length: dim}, (_,i)=>i+1), datasets: [
      { label: "Income", data: incomeDay, backgroundColor: css('--success') },
      { label: "Expense", data: expenseDay, backgroundColor: css('--danger') }
    ]},
    options: {
      plugins:{ legend:{ labels:{ color:labelColor } } },
      scales: {
        x: { ticks:{ color:labelColor }, grid:{ color:gridColor } },
        y: { ticks:{ color:labelColor }, grid:{ color:gridColor } }
      }
    }
  });
}

/* ================== Archive/History ================== */
function archiveCurrentMonth(){
  if(!confirm("Archive current month? This saves current items & budget to Monthly History and clears the current month.")) return;

  const now = new Date();
  const currKey = `${now.getFullYear()}-${String(now.getMonth()+1).padStart(2,'0')}`;
  const label = monthLabel(currKey);
  const totalSpent = items.filter(e=>e.type===ITEM_TYPE.EXPENSE).reduce((s,e)=>s+(e.amount||0),0);
  const totalIncome = items.filter(e=>e.type===ITEM_TYPE.INCOME).reduce((s,e)=>s+(e.amount||0),0);
  const savedVal = Math.max((monthlyBudget||0) - totalSpent, 0);

  const archiveObj = {
    key: currKey,
    label,
    budget: monthlyBudget || 0,
    totalSpent,
    totalIncome,
    net: totalIncome - totalSpent,
    saved: savedVal,
    archivedAt: new Date().toISOString(),
    items: items.slice()
  };

  const idx = monthlyHistory.findIndex(m => m.key === currKey);
  if(idx >= 0) monthlyHistory[idx] = archiveObj; else monthlyHistory.push(archiveObj);

  // Clear current month
  items = [];
  monthlyBudget = 0;

  // Clear monthly-scoped goals at month end
  goals = goals.filter(g => g.scope !== "monthly");
  goalsMonth = currKey;

  saveAll();

  // ‚úÖ Correct refresh order so Goals update immediately
  updateDashboard();
  renderCurrentTable();
  renderMonthlyHistory();
  renderGoals();
  checkGoalsProgressAndCelebrate();

  showAlert(`‚úÖ Archived ${label}. Monthly goals cleared. Set new monthly goals for next month in the Goals tab.`, "info");
}
function renderMonthlyHistory(){
  const container = $("historyList");
  container.innerHTML = "";
  if(monthlyHistory.length === 0){
    container.innerHTML = `<div class="muted">No archived months yet. Use "Close Month & Save History" on Dashboard to archive.</div>`;
    return;
  }
  const itemsArr = [...monthlyHistory].sort((a,b)=> b.key.localeCompare(a.key));
  itemsArr.forEach((m) => {
    const displayIdx = monthlyHistory.indexOf(m);
    const block = document.createElement("div");
    block.className="card";
    block.style.textAlign="left";
    block.innerHTML = `
      <div style="display:flex; flex-wrap:wrap; gap:10px; justify-content:space-between; align-items:center;">
        <div>
          <strong>${m.label}</strong>
          <span class="small muted" style="margin-left:10px;">Budget: ${fmt(m.budget)} IQD</span>
          <span class="small muted" style="margin-left:8px;">Spent: ${fmt(m.totalSpent)} IQD</span>
          <span class="small muted" style="margin-left:8px;">Income: ${fmt(m.totalIncome)} IQD</span>
          <span class="small muted" style="margin-left:8px;">Net: ${fmt(m.net)} IQD</span>
        </div>
        <div style="display:flex; gap:8px;">
          <button class="btn btn-export" data-action="exportArchiveCSV" data-index="${displayIdx}">‚¨á CSV</button>
          <button class="btn" data-action="restoreArchive" data-index="${displayIdx}">üîÅ Restore</button>
          <button class="btn btn-delete" data-action="deleteArchive" data-index="${displayIdx}">üóë Delete</button>
        </div>
      </div>
      <div class="small muted" style="margin-top:6px;">Archived at: ${new Date(m.archivedAt).toLocaleString()}</div>
      <details style="margin-top:10px;">
        <summary>Show items</summary>
        <table style="margin-top:8px;">
          <thead><tr><th>Type</th><th>Date</th><th>Title</th><th>Category</th><th>Amount</th></tr></thead>
          <tbody>${m.items.map(x=>`<tr>
            <td>${x.type}</td><td>${x.date}</td><td>${escapeHtml(x.title)}</td><td>${escapeHtml(x.category||"-")}</td><td>${fmt(x.amount)}</td>
          </tr>`).join("")}</tbody>
        </table>
      </details>
    `;
    container.appendChild(block);
  });
}
function exportArchiveCSV(index){
  const m = monthlyHistory[index]; if(!m) return;
  const rows = [];
  rows.push(["Archived Month", m.label]);
  rows.push(["Budget (IQD)", m.budget]);
  rows.push(["Total Spent (IQD)", m.totalSpent]);
  rows.push(["Total Income (IQD)", m.totalIncome]);
  rows.push(["Net (IQD)", m.net]);
  rows.push([]);
  rows.push(["Type","Date","Title","Category","Amount (IQD)"]);
  m.items.forEach(e => rows.push([e.type, e.date, String(e.title).replace(/\"/g,'\"\"'), e.category||"", e.amount]));
  const csvContent = rows.map(r => r.map(cell => `"${cell}"`).join(",")).join("\r\n");
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url; a.download = `${m.key}_archive_${currentUser}.csv`;
  document.body.appendChild(a); a.click(); document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
function restoreArchivedMonth(index){
  if(!confirm("Restore this archived month into the current workspace? This will replace current items and budget.")) return;
  const m = monthlyHistory[index]; if(!m) return;
  items = m.items.slice();
  monthlyBudget = m.budget || 0;
  saveAll(); updateDashboard(); renderCurrentTable();
  showSection('dashboard');
  alert(`‚úÖ Restored ${m.label} to current workspace.`);
  checkGoalsProgressAndCelebrate();
}
function deleteArchive(index){
  if(!confirm("Delete this archived month permanently? This cannot be undone.")) return;
  monthlyHistory.splice(index,1);
  saveAll(); renderMonthlyHistory();
}
function filterHistory(){
  const start=$("startMonth").value, end=$("endMonth").value;
  if(!start||!end){ alert("Pick start & end"); return; }
  const itemsSel=monthlyHistory.filter(m=>m.key>=start && m.key<=end);
  const total=itemsSel.reduce((s,m)=>s+m.totalSpent,0);
  const saved=itemsSel.reduce((s,m)=>s+m.saved,0);
  $("rangeSummary").style.display="block";
  $("rangeSummary").innerHTML=`From <b>${monthLabel(start)}</b> to <b>${monthLabel(end)}</b>: Spent <b>${fmt(total)} IQD</b>, Saved <b>${fmt(saved)} IQD</b>`;
}

/* ================== Import/Export Current ================== */
// PDF
function exportCurrentPDF(){
  if(items.length===0){ alert("No items to export"); return; }
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();
  doc.setFontSize(16);
  doc.text(`Spending Report (${new Date().toLocaleDateString()})`,10,15);
  doc.setFontSize(12);
  doc.text(`Budget: ${monthlyBudget} IQD`,10,25);
  const totalSpent = items.filter(e=>e.type===ITEM_TYPE.EXPENSE).reduce((s,e)=>s+e.amount,0);
  const totalIncome = items.filter(e=>e.type===ITEM_TYPE.INCOME).reduce((s,e)=>s+e.amount,0);
  doc.text(`Total Spent: ${totalSpent} IQD`,10,32);
  doc.text(`Total Income: ${totalIncome} IQD`,10,39);
  let y=49;
  items.forEach(e=>{
    const t = `${e.date} | ${e.type.toUpperCase()} | ${e.title} | ${e.category||"-"} | ${e.amount} IQD`;
    doc.text(t,10,y);
    y+=7; if(y>280){ doc.addPage(); y=20; }
  });
  doc.save("spending.pdf");
}

// CSV import
function parseCSVLine(line){
  const out = []; let cur = ''; let inQuotes = false;
  for(let i=0;i<line.length;i++){
    const ch = line[i];
    if(ch === '"' ){
      if(inQuotes && line[i+1]==='"'){ cur += '"'; i++; continue; }
      inQuotes = !inQuotes; continue;
    }
    if(ch === ',' && !inQuotes){ out.push(cur); cur = ''; continue; }
    cur += ch;
  }
  out.push(cur);
  return out.map(s=>s.trim().replace(/^"|"$/g,''));
}
function rowToItem(row){
  const [type,date,title,category,amount] = row;
  if(type && date && title && amount){
    return { type:String(type).toLowerCase(), date:String(date).slice(0,10), title:String(title), category:String(category||""), amount:parseFloat(amount)||0, note:"", receiptId:null, receiptData:null };
  }
  return null;
}
function importCSV(file){
  const reader = new FileReader();
  reader.onload = e=>{
    const text = e.target.result;
    const lines = text.split(/\r?\n/);
    if(lines.length===0){ alert("Empty CSV."); return; }
    const rows = lines.map(line => parseCSVLine(line)).filter(r=>r.length);
    if(rows.length===0){ alert("No rows found in CSV."); return; }
    let startIdx = 0;
    const hdrRow = rows[0].map(c=>String(c).toLowerCase()).join(",");
    if(hdrRow.includes("type") && hdrRow.includes("date")) startIdx = 1;
    const newItems=[];
    for(let i=startIdx;i<rows.length;i++){
      const itm = rowToItem(rows[i]);
      if(itm) newItems.push(itm);
    }
    if(newItems.length===0){ alert("No valid rows found in CSV."); return; }
    if(!confirm("Importing CSV will replace the current month items. Continue?")) return;
    items = newItems;
    saveAll(); updateDashboard(); renderCurrentTable();
    alert("CSV imported ‚úÖ");
    checkGoalsProgressAndCelebrate();
  };
  reader.readAsText(file);
}

// Excel import
function excelDateToJSDate(serial) {
  const utc_days = Math.floor(serial - 25569);
  const utc_value = utc_days * 86400;
  const date_info = new Date(utc_value * 1000);
  const fractional = serial % 1;
  const seconds = Math.round(fractional * 86400);
  return new Date(date_info.getTime() + seconds * 1000);
}
function importExcel(file){
  const reader = new FileReader();
  reader.onload = (e)=>{
    const data = new Uint8Array(e.target.result);
    const wb = XLSX.read(data, {type:"array"});
    const firstSheet = wb.SheetNames[0];
    const ws = wb.Sheets[firstSheet];
    const rows = XLSX.utils.sheet_to_json(ws, {header:1, defval:""});
    if(rows.length===0){ alert("Empty Excel sheet."); return; }
    let startIdx = 0;
    const headers = rows[0].map(h=>String(h).toLowerCase());
    if(headers.join(",").includes("type") && headers.join(",").includes("date")) startIdx = 1;
    const newItems=[];
    for(let i=startIdx;i<rows.length;i++){
      const r = rows[i]; if(!r || r.length===0) continue;
      const [type,dateRaw,title,category,amount] = r;
      if(type && dateRaw && title && amount){
        let dateStr = String(dateRaw).slice(0,10);
        if(typeof dateRaw === 'number'){
          const dt = excelDateToJSDate(dateRaw);
          dateStr = dt.toISOString().slice(0,10);
        } else if(dateRaw instanceof Date){
          dateStr = dateRaw.toISOString().slice(0,10);
        }
        const itm = rowToItem([type,dateStr,title,category,amount]);
        if(itm) newItems.push(itm);
      }
    }
    if(newItems.length===0){ alert("No valid rows found."); return; }
    if(!confirm("Importing Excel will replace the current month items. Continue?")) return;
    items = newItems;
    saveAll(); updateDashboard(); renderCurrentTable();
    alert("Excel imported ‚úÖ");
    checkGoalsProgressAndCelebrate();
  };
  reader.readAsArrayBuffer(file);
}

// JSON backup (metadata only; receipts not included)
async function exportJSONBackup(){
  const data = {
    user: currentUser,
    savedAt: new Date().toISOString(),
    items, monthlyBudget, monthlyHistory, recurringItems, categoryBudgets, lastAppliedMonth, goals, goalsMonth,
    note: "Receipts stored in IndexedDB are NOT included in this JSON backup."
  };
  const blob = new Blob([JSON.stringify(data,null,2)], {type:"application/json"});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url; a.download = `backup_${currentUser}_${Date.now()}.json`;
  document.body.appendChild(a); a.click(); document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
async function importJSONBackup(file){
  const reader = new FileReader();
  reader.onload = e=>{
    try{
      const data = JSON.parse(e.target.result);
      if(!data || typeof data !== 'object'){ alert("Invalid JSON file."); return; }
      if(!confirm("Importing JSON will REPLACE your current data for this user (except receipts). Continue?")) return;
      items = Array.isArray(data.items)? data.items: [];
      monthlyBudget = Number(data.monthlyBudget)||0;
      monthlyHistory = Array.isArray(data.monthlyHistory)? data.monthlyHistory: [];
      recurringItems = Array.isArray(data.recurringItems)? data.recurringItems: [];
      categoryBudgets = typeof data.categoryBudgets==='object' && data.categoryBudgets? data.categoryBudgets: {};
      lastAppliedMonth = String(data.lastAppliedMonth||"");
      goals = Array.isArray(data.goals)? data.goals: [];
      goalsMonth = String(data.goalsMonth||"");
      saveAll();
      updateDashboard(); renderCurrentTable(); renderMonthlyHistory(); renderRecurringTable(); buildCategorySelect(); renderGoals();
      showAlert("‚úÖ JSON backup imported. (Receipts not included.)", "info");
      checkGoalsProgressAndCelebrate();
    }catch(err){
      console.error(err);
      alert("Failed to parse JSON.");
    }
  };
  reader.readAsText(file);
}

/* ================== Reports ================== */
function prepareReportFilters(){
  buildCategorySelect();
  $("reportTable").innerHTML="";
  $("reportSummary").style.display="none";
}
function runReport(){
  const from = $("repFrom").value ? new Date($("repFrom").value) : null;
  const to = $("repTo").value ? new Date($("repTo").value) : null;
  const cat = $("repCategory").value;
  reportRows = items.filter(e=>{
    const d = parseDateStr(e.date);
    if(!d) return false;
    if(from && d < from) return false;
    if(to){ const td = new Date(to.getFullYear(), to.getMonth(), to.getDate(), 23,59,59); if(d > td) return false; }
    if(cat && (e.category||"") !== cat) return false;
    return true;
  });
  const tbody = $("reportTable"); tbody.innerHTML="";
  let totalExp=0,totalInc=0;
  reportRows.forEach(r=>{
    if(r.type===ITEM_TYPE.EXPENSE) totalExp+=r.amount; else totalInc+=r.amount;
    const tr=document.createElement("tr");
    tr.innerHTML=`<td>${r.type}</td><td>${r.date}</td><td>${escapeHtml(r.title)}</td><td>${escapeHtml(r.category||"-")}</td><td>${fmt(r.amount)}</td>`;
    tbody.appendChild(tr);
  });
  const net = totalInc-totalExp;
  $("reportSummary").style.display="block";
  $("reportSummary").innerHTML = `
    <div><b>Rows:</b> ${reportRows.length} &nbsp;|&nbsp;
    <b>Total Income:</b> ${fmt(totalInc)} IQD &nbsp;|&nbsp;
    <b>Total Expense:</b> ${fmt(totalExp)} IQD &nbsp;|&nbsp;
    <b>Net:</b> ${fmt(net)} IQD</div>`;
}
function exportReportCSV(){
  if(!reportRows.length){ alert("Run the report first."); return; }
  const rows = [["Type","Date","Title","Category","Amount (IQD)"]];
  reportRows.forEach(r=> rows.push([r.type, r.date, r.title, r.category||"", r.amount]));
  const csvContent = rows.map(r => r.map(cell => `"${String(cell).replace(/"/g,'""')}"`).join(",")).join("\r\n");
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url; a.download = `report_${Date.now()}.csv`;
  document.body.appendChild(a); a.click(); document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

/* ================== Insights & Forecast ================== */
function renderInsights(){
  const ul = $("insightsList"); ul.innerHTML="";
  const now = new Date();
  const lastMonthKey = (()=> {
    const d = new Date(now.getFullYear(), now.getMonth()-1, 1);
    return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}`;
  })();

  const totalSpent = items.filter(e=>e.type===ITEM_TYPE.EXPENSE).reduce((s,e)=>s+e.amount,0);
  const totalIncome = items.filter(e=>e.type===ITEM_TYPE.INCOME).reduce((s,e)=>s+e.amount,0);
  const net = totalIncome - totalSpent;

  const lastM = monthlyHistory.find(x=>x.key===lastMonthKey);
  if(lastM){
    const diff = totalSpent - lastM.totalSpent;
    const pct = lastM.totalSpent>0 ? Math.round((diff/lastM.totalSpent)*100) : (totalSpent>0?100:0);
    const li = document.createElement("li");
    li.textContent = diff>=0
      ? `You are spending ${fmt(Math.abs(diff))} IQD (${pct}%) more than last month.`
      : `Great! You are spending ${fmt(Math.abs(diff))} IQD (${Math.abs(pct)}%) less than last month.`;
    ul.appendChild(li);
  } else {
    const li = document.createElement("li");
    li.textContent = "No data for last month yet. Archive a month to enable comparisons.";
    ul.appendChild(li);
  }

  const byCat = totalsByCategory();
  const topCat = Object.entries(byCat).sort((a,b)=>b[1]-a[1])[0];
  const li2=document.createElement("li");
  li2.textContent = topCat ? `Top spending category: ${topCat[0]} ‚Äì ${fmt(topCat[1])} IQD.` : "No expenses yet this month.";
  ul.appendChild(li2);

  const li3=document.createElement("li");
  li3.textContent = net < 0
    ? "Warning: Expenses exceed incomes. Consider reducing spending or increasing income."
    : "Good: Incomes cover expenses.";
  ul.appendChild(li3);
}
function renderForecast(){
  const container = $("forecastText");
  const ctx = $("forecastChart").getContext("2d");
  const now = new Date();
  const dim = new Date(now.getFullYear(), now.getMonth()+1, 0).getDate();
  const day = now.getDate();

  const spentSoFar = items.filter(e=>e.type===ITEM_TYPE.EXPENSE).reduce((s,e)=>s+e.amount,0);
  const incomeSoFar = items.filter(e=>e.type===ITEM_TYPE.INCOME).reduce((s,e)=>s+e.amount,0);

  const avgDailyExp = day>0 ? spentSoFar / day : 0;
  const avgDailyInc = day>0 ? incomeSoFar / day : 0;

  const forecastExp = Math.round(avgDailyExp * dim);
  const forecastInc = Math.round(avgDailyInc * dim);
  const forecastNet = forecastInc - forecastExp;

  container.innerHTML = `
    <div><b>Forecasted End-of-Month:</b>
      Income ${fmt(forecastInc)} IQD, Expense ${fmt(forecastExp)} IQD,
      Net ${fmt(forecastNet)} IQD.
    </div>`;

  if(forecastChart) forecastChart.destroy();
  forecastChart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: ["Income (forecast)","Expense (forecast)","Net (forecast)"],
      datasets: [{ data:[forecastInc, forecastExp, forecastNet], backgroundColor: [css('--success'), css('--danger'), css('--primary')] }]
    },
    options:{
      plugins:{ legend:{ display:false } },
      scales:{
        x:{ ticks:{ color:css('--fg') }, grid:{ color: document.body.classList.contains('dark') ? 'rgba(255,255,255,.15)' : 'rgba(0,0,0,.08)'} },
        y:{ ticks:{ color:css('--fg') }, grid:{ color: document.body.classList.contains('dark') ? 'rgba(255,255,255,.15)' : 'rgba(0,0,0,.08)'} }
      }
    }
  });
}

/* ================== Goals ================== */
function addGoal(){
  const title = $("goalTitle").value.trim();
  const target = parseFloat($("goalTarget").value||"");
  const scope = $("goalScope").value;
  if(!title || isNaN(target) || target<=0){ alert("Enter a goal title and positive target amount."); return; }
  goals.push({ title, target, scope, achievedAt: null });
  $("goalTitle").value=""; $("goalTarget").value="";
  if(scope==="monthly" && goalsMonth !== monthKey()){ goalsMonth = monthKey(); }
  saveAll(); renderGoals(); checkGoalsProgressAndCelebrate();
  showAlert("‚úÖ Goal added.", "info");
}
function removeGoal(idx){
  if(!confirm("Delete this goal?")) return;
  goals.splice(idx,1); saveAll(); renderGoals();
}
function currentMonthNet(){
  const exp = items.filter(e=>e.type===ITEM_TYPE.EXPENSE).reduce((s,e)=>s+e.amount,0);
  const inc = items.filter(e=>e.type===ITEM_TYPE.INCOME).reduce((s,e)=>s+e.amount,0);
  return inc - exp;
}
function globalNet(){
  const curr = currentMonthNet();
  const archivedNet = monthlyHistory.reduce((s,m)=>s + (m.net||0), 0);
  return curr + archivedNet;
}
function renderGoals(){
  const wrap = $("goalsList");
  wrap.innerHTML="";
  if(goals.length===0){ wrap.innerHTML=`<div class="muted">No goals yet. Add one above.</div>`; return; }

  const gnetMonthly = currentMonthNet();
  const gnetGlobal = globalNet();

  goals.forEach((g,idx)=>{
    const progress = g.scope==="monthly" ? Math.max(0, gnetMonthly) : Math.max(0, gnetGlobal);
    const pct = g.target>0 ? Math.min(100, Math.round((progress/g.target)*100)) : 0;
    const achieved = progress >= g.target;
    const card = document.createElement("div");
    card.className = "card";
    card.style.textAlign = "left";
    card.innerHTML = `
      <div style="display:flex; justify-content:space-between; align-items:center; gap:10px; flex-wrap:wrap;">
        <div>
          <div style="font-weight:700;">${escapeHtml(g.title)} ${g.scope==="monthly" ? `<span class="small muted">(Monthly)</span>` : `<span class="small muted">(Global)</span>`}</div>
          <div class="small muted">Target: ${fmt(g.target)} IQD</div>
        </div>
        <div>
          <button class="btn btn-delete" data-action="removeGoal" data-index="${idx}">üóë</button>
        </div>
      </div>
      <div style="margin-top:8px;">
        <progress max="${g.target}" value="${progress}"></progress>
        <div class="small muted" style="margin-top:4px;">Progress: ${fmt(progress)} / ${fmt(g.target)} IQD (${pct}%) ${achieved? "üéâ Achieved!":""}</div>
      </div>
    `;
    wrap.appendChild(card);
  });
}
function checkGoalsProgressAndCelebrate(){
  const achievedNow = goals.filter(g=>{
    const progress = g.scope==="monthly" ? Math.max(0, currentMonthNet()) : Math.max(0, globalNet());
    return !g.achievedAt && progress >= g.target;
  });
  if(achievedNow.length){
    achievedNow.forEach(g=> g.achievedAt = new Date().toISOString());
    saveAll();
    playDing();
    showAlert(`üéâ Goal achieved: ${escapeHtml(achievedNow[0].title)}`, "info");
  }
}
// ‚úÖ New: Monthly goals rollover on month change
function rolloverMonthlyGoals() {
  const currKey = monthKey();
  if (goalsMonth !== currKey) {
    goals = goals.filter(g => g.scope !== "monthly");
    goalsMonth = currKey;
    saveAll();
    // Only gently notify (avoid noise on every load)
    showAlert("üìÜ Monthly goals have been reset for the new month. Set fresh ones!", "info");
  }
}

/* ================== Auth / Init ================== */
function unlockApp(){
  const u = $("username").value.trim();
  const p = $("unlockPassword").value;
  if(!u || !p){ $("errorMsg").style.display="block"; return; }
  if(users[u] && users[u]===p){
    currentUser = u;
    $("errorMsg").style.display="none";
    $("lockScreen").style.display="none";
    $("app").style.display="block";
    openDB().then(()=>{
      loadUserData();
      applyRecurringIfNeeded();
      rolloverMonthlyGoals(); // ‚úÖ apply at startup
      buildCategorySelect();
      updateDashboard();
      renderCurrentTable();
    });
  } else {
    $("errorMsg").style.display="block";
  }
}
function logout(){
  if(!confirm("Logout?")) return;
  location.reload();
}

/* ================== Event Wiring (no inline handlers) ================== */
function wireEvents(){
  // Lock screen
  $("btnUnlock").addEventListener("click", unlockApp);
  $("unlockPassword").addEventListener("keydown", (e)=>{ if(e.key==="Enter") unlockApp(); });

  // Nav
  $("navDashboard").addEventListener("click", ()=>showSection("dashboard"));
  $("navAdd").addEventListener("click", ()=>showSection("add"));
  $("navHistory").addEventListener("click", ()=>showSection("history"));
  $("navRecurring").addEventListener("click", ()=>showSection("recurring"));
  $("navCategories").addEventListener("click", ()=>showSection("categories"));
  $("navReports").addEventListener("click", ()=>showSection("reports"));
  $("navInsights").addEventListener("click", ()=>showSection("insights"));
  $("navGoals").addEventListener("click", ()=>showSection("goals"));

  // Dashboard controls
  $("monthlyBudget").addEventListener("change", syncBudgetInputs);
  $("quickBudget").addEventListener("input", quickSaveBudget);
  $("searchCurrent").addEventListener("input", renderCurrentTable);
  $("btnArchiveMonth").addEventListener("click", archiveCurrentMonth);
  $("btnResetMonth").addEventListener("click", ()=>{
    if(confirm("Reset current month? This clears current items and budget.")){
      items=[]; monthlyBudget=0; saveAll(); updateDashboard(); renderCurrentTable(); checkGoalsProgressAndCelebrate();
    }
  });
  $("btnExportPDF").addEventListener("click", exportCurrentPDF);
  $("btnTheme").addEventListener("click", toggleTheme);
  $("btnLogout").addEventListener("click", logout);

  // Add item
  $("btnAddItem").addEventListener("click", addItem);
  $("btnClearAdd").addEventListener("click", clearAddForm);

  // History
  $("btnFilterHistory").addEventListener("click", filterHistory);
  $("historyList").addEventListener("click", (e)=>{
    const btn = e.target.closest("button[data-action]");
    if(!btn) return;
    const idx = Number(btn.dataset.index);
    if(btn.dataset.action==="exportArchiveCSV") exportArchiveCSV(idx);
    if(btn.dataset.action==="restoreArchive") restoreArchivedMonth(idx);
    if(btn.dataset.action==="deleteArchive") deleteArchive(idx);
  });

  // Recurring
  $("recurringTable").addEventListener("click", (e)=>{
    const btn = e.target.closest("button[data-action='removeRecurring']");
    if(!btn) return;
    deleteRecurring(Number(btn.dataset.index));
  });

  // Categories
  $("btnSaveCatBudgets").addEventListener("click", saveCategoryBudgets);

  // Reports
  $("btnRunReport").addEventListener("click", runReport);
  $("btnExportReportCSV").addEventListener("click", exportReportCSV);

  // Goals
  $("btnAddGoal").addEventListener("click", addGoal);
  $("goalsList").addEventListener("click", (e)=>{
    const btn = e.target.closest("button[data-action='removeGoal']");
    if(!btn) return;
    removeGoal(Number(btn.dataset.index));
  });

  // Current table actions (delegation)
  $("currentTable").addEventListener("click", (e)=>{
    const btn = e.target.closest("button[data-action]");
    const a = e.target.closest("a[data-action='openReceipt']");
    if(btn){
      const idx = Number(btn.dataset.index);
      if(btn.dataset.action==="openEdit") openEditModal(idx);
      if(btn.dataset.action==="deleteItem") deleteItem(idx);
    } else if(a){
      const rid = Number(a.dataset.rid);
      openReceipt(rid);
    }
  });

  // Modal
  $("btnEditCancel").addEventListener("click", closeEditModal);
  $("btnEditSave").addEventListener("click", saveEdit);
  $("modalBackdrop").addEventListener("click", (e)=>{ if(e.target.id==="modalBackdrop") closeEditModal(); });

  // Imports/Exports
  $("btnImportCSV").addEventListener("click", ()=> $("importCSV").click());
  $("btnImportXLSX").addEventListener("click", ()=> $("importXLSX").click());
  $("btnImportJSON").addEventListener("click", ()=> $("importJSON").click());
  $("btnExportJSON").addEventListener("click", exportJSONBackup);

  $("importCSV").addEventListener("change", (e)=>{ const f=e.target.files[0]; if(f) importCSV(f); e.target.value=""; });
  $("importXLSX").addEventListener("change", (e)=>{ const f=e.target.files[0]; if(f) importExcel(f); e.target.value=""; });
  $("importJSON").addEventListener("change", (e)=>{ const f=e.target.files[0]; if(f) importJSONBackup(f); e.target.value=""; });
}

document.addEventListener("DOMContentLoaded", wireEvents);
</script>
</body>
</html>
